// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ GameScore –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã

class GameScoreSetup {
    constructor() {
        this.gameScore = null;
        this.setupStatus = {
            globalStorage: false,
            cloudStorage: false,
            leaderboard: false,
            permissions: false
        };
        
        this.init();
    }

    async init() {
        console.log('üéÆ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GameScore...');
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GameScore
        await this.waitForGameScore();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await this.checkCurrentSettings();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await this.setupGameScore();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await this.verifySetup();
        
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GameScore –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    }

    async waitForGameScore() {
        return new Promise((resolve) => {
            const checkGameScore = () => {
                if (typeof gp !== 'undefined' && gp.isReady) {
                    this.gameScore = gp;
                    console.log('‚úÖ GameScore –≥–æ—Ç–æ–≤');
                    resolve();
                } else {
                    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ GameScore...');
                    setTimeout(checkGameScore, 1000);
                }
            };
            checkGameScore();
        });
    }

    async checkCurrentSettings() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            const globalTest = await this.gameScore.storage.getGlobal('test_key');
            console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: –¥–æ—Å—Ç—É–ø–Ω–æ');
            this.setupStatus.globalStorage = true;
        } catch (error) {
            console.log('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
            console.log('   –û—à–∏–±–∫–∞:', error.message);
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            const cloudTest = await this.gameScore.storage.get('test_key');
            console.log('‚úÖ –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: –¥–æ—Å—Ç—É–ø–Ω–æ');
            this.setupStatus.cloudStorage = true;
        } catch (error) {
            console.log('‚ùå –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
            console.log('   –û—à–∏–±–∫–∞:', error.message);
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –ª–∏–¥–µ—Ä–æ–≤
            const leaderboardTest = await this.gameScore.leaderboard.getTable('multiplayer');
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ "multiplayer": —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            this.setupStatus.leaderboard = true;
        } catch (error) {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ "multiplayer": –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            console.log('   –û—à–∏–±–∫–∞:', error.message);
        }
    }

    async setupGameScore() {
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GameScore...');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        await this.setupGlobalStorage();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        await this.setupCloudStorage();
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
        await this.setupLeaderboard();
    }

    async setupGlobalStorage() {
        console.log('üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
            const gamesList = await this.gameScore.storage.getGlobal('multiplayer_games_list');
            
            if (!gamesList) {
                await this.gameScore.storage.setGlobal('multiplayer_games_list', JSON.stringify([]));
                console.log('‚úÖ –°–ø–∏—Å–æ–∫ –∏–≥—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } else {
                console.log('‚úÖ –°–ø–∏—Å–æ–∫ –∏–≥—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã (—Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç)
            await this.cleanupOldGames();
            
            this.setupStatus.globalStorage = true;
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error.message);
        }
    }

    async setupCloudStorage() {
        console.log('‚òÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            let playerStats = await this.gameScore.storage.get('multiplayerStats');
            
            if (!playerStats) {
                const defaultStats = {
                    gamesPlayed: 0,
                    wins: 0,
                    losses: 0,
                    totalScore: 0,
                    averageScore: 0,
                    bestScore: 0,
                    rating: 1000
                };
                
                await this.gameScore.storage.set('multiplayerStats', JSON.stringify(defaultStats));
                console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            } else {
                console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
            
            this.setupStatus.cloudStorage = true;
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error.message);
        }
    }

    async setupLeaderboard() {
        console.log('üèÜ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤...');
        
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
            await this.gameScore.leaderboard.getTable('multiplayer');
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ "multiplayer" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            this.setupStatus.leaderboard = true;
        } catch (error) {
            console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ "multiplayer" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            console.log('   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é –≤ –ø–∞–Ω–µ–ª–∏ GameScore');
            console.log('   –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: —Å–º. —Ñ–∞–π–ª GAMESCORE_SETUP_GUIDE.md');
        }
    }

    async cleanupOldGames() {
        try {
            const gamesListStr = await this.gameScore.storage.getGlobal('multiplayer_games_list');
            if (!gamesListStr) return;
            
            const gamesList = JSON.parse(gamesListStr);
            const now = Date.now();
            const thirtyMinutes = 30 * 60 * 1000;
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä—ã, —É–¥–∞–ª—è—è —Å—Ç–∞—Ä—ã–µ
            const activeGames = gamesList.filter(game => {
                const gameAge = now - game.createdAt;
                return gameAge < thirtyMinutes;
            });
            
            if (activeGames.length !== gamesList.length) {
                await this.gameScore.storage.setGlobal('multiplayer_games_list', JSON.stringify(activeGames));
                console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${gamesList.length - activeGames.length} —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä`);
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä:', error.message);
        }
    }

    async verifySetup() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        const allGood = Object.values(this.setupStatus).every(status => status);
        
        if (allGood) {
            console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
            console.log('üéÆ –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
        } else {
            console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
            
            if (!this.setupStatus.globalStorage) {
                console.log('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - —Ç—Ä–µ–±—É–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏ GameScore');
            }
            
            if (!this.setupStatus.cloudStorage) {
                console.log('‚ùå –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - —Ç—Ä–µ–±—É–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏ GameScore');
            }
            
            if (!this.setupStatus.leaderboard) {
                console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ - —Ç—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏ GameScore');
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        this.showUsefulInfo();
    }

    showUsefulInfo() {
        console.log('\nüìã –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
        console.log('üåê –ü–∞–Ω–µ–ª—å GameScore: https://gs.eponesh.com');
        console.log('üÜî ID –ø—Ä–æ–µ–∫—Ç–∞: 248');
        console.log('üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: GAMESCORE_SETUP_GUIDE.md');
        
        console.log('\nüß™ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log('// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä');
        console.log('gp.storage.getGlobal("multiplayer_games_list").then(console.log);');
        
        console.log('// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        console.log('gp.storage.get("multiplayerStats").then(console.log);');
        
        console.log('// –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)');
        console.log('gp.storage.setGlobal("multiplayer_games_list", "[]");');
        
        console.log('\nüéØ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞:');
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ multiplayer-demo.html');
        console.log('2. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ò–≥—Ä–∞—Ç—å —Å —Å–ª—É—á–∞–π–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º" –≤ –∏–≥—Ä–µ');
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof window !== 'undefined') {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => new GameScoreSetup(), 2000);
        });
    } else {
        setTimeout(() => new GameScoreSetup(), 2000);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if (typeof window !== 'undefined') {
    window.GameScoreSetup = GameScoreSetup;
    window.setupGameScore = () => new GameScoreSetup();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameScoreSetup;
} 